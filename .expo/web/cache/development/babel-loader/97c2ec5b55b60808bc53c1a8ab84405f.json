{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\stefa\\\\Desktop\\\\FocusTime-app-main\\\\src\\\\components\\\\Countdown.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { colors } from \"../utils/colors\";\nimport { fontSizes, spacing } from \"../utils/sizes\";\n\nvar minutesToMillis = function minutesToMillis(min) {\n  return min * 1000 * 60;\n};\n\nvar formatTime = function formatTime(time) {\n  return time < 10 ? \"0\" + time : time;\n};\n\nexport var Countdown = function Countdown(_ref) {\n  var _ref$minutes = _ref.minutes,\n      minutes = _ref$minutes === void 0 ? 0.1 : _ref$minutes,\n      isPaused = _ref.isPaused,\n      onProgress = _ref.onProgress,\n      onEnd = _ref.onEnd;\n  var interval = React.useRef(null);\n\n  var countDown = function countDown() {\n    setMillis(function (time) {\n      if (time === 0) {\n        clearInterval(interval.current);\n        return time;\n      }\n\n      var timeLeft = time - 1000;\n      onProgress(timeLeft / minutesToMillis(minutes));\n      return timeLeft;\n    });\n  };\n\n  useEffect(function () {\n    setMillis(minutesToMillis(minutes));\n  }, [minutes]);\n  useEffect(function () {\n    if (isPaused) {\n      if (interval.current) clearInterval(interval.current);\n      return;\n    }\n\n    interval.current = setInterval(countDown, 1000);\n    return function () {\n      clearInterval(interval.current);\n    };\n  }, [isPaused]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      millis = _useState2[0],\n      setMillis = _useState2[1];\n\n  var minute = Math.floor(millis / 1000 / 60) % 60;\n  var seconds = Math.floor(millis / 1000) % 60;\n  return React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, formatTime(minute), \":\", formatTime(seconds));\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: fontSizes.xxxl,\n    fontWeight: 'bold',\n    color: colors.white,\n    padding: spacing.lg,\n    backgroundColor: 'rgba(94, 132, 226, 0.3)'\n  }\n});","map":{"version":3,"sources":["C:/Users/stefa/Desktop/FocusTime-app-main/src/components/Countdown.js"],"names":["React","useState","useEffect","colors","fontSizes","spacing","minutesToMillis","min","formatTime","time","Countdown","minutes","isPaused","onProgress","onEnd","interval","useRef","countDown","setMillis","clearInterval","current","timeLeft","setInterval","millis","minute","Math","floor","seconds","styles","text","StyleSheet","create","fontSize","xxxl","fontWeight","color","white","padding","lg","backgroundColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;AAGA,SAASC,MAAT;AACA,SAASC,SAAT,EAAoBC,OAApB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD;AAAA,SAASA,GAAG,GAAG,IAAN,GAAa,EAAtB;AAAA,CAAxB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAUA,IAAI,GAAG,EAAP,SAAgBA,IAAhB,GAAyBA,IAAnC;AAAA,CAAnB;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAKnB;AAAA,0BAJFC,OAIE;AAAA,MAJFA,OAIE,6BAJQ,GAIR;AAAA,MAHFC,QAGE,QAHFA,QAGE;AAAA,MAFFC,UAEE,QAFFA,UAEE;AAAA,MADFC,KACE,QADFA,KACE;AACF,MAAMC,QAAQ,GAAGf,KAAK,CAACgB,MAAN,CAAa,IAAb,CAAjB;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBC,IAAAA,SAAS,CAAC,UAACT,IAAD,EAAU;AAChB,UAAGA,IAAI,KAAK,CAAZ,EAAe;AACXU,QAAAA,aAAa,CAACJ,QAAQ,CAACK,OAAV,CAAb;AACA,eAAOX,IAAP;AACH;;AACD,UAAMY,QAAQ,GAAGZ,IAAI,GAAG,IAAxB;AACAI,MAAAA,UAAU,CAACQ,QAAQ,GAAGf,eAAe,CAACK,OAAD,CAA3B,CAAV;AACA,aAAOU,QAAP;AACH,KARQ,CAAT;AASH,GAVD;;AAYAnB,EAAAA,SAAS,CAAC,YAAM;AACZgB,IAAAA,SAAS,CAACZ,eAAe,CAACK,OAAD,CAAhB,CAAT;AACH,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAKAT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGU,QAAH,EAAa;AACT,UAAGG,QAAQ,CAACK,OAAZ,EAAqBD,aAAa,CAACJ,QAAQ,CAACK,OAAV,CAAb;AACrB;AACH;;AACDL,IAAAA,QAAQ,CAACK,OAAT,GAAmBE,WAAW,CAACL,SAAD,EAAY,IAAZ,CAA9B;AACA,WAAO,YAAM;AACVE,MAAAA,aAAa,CAACJ,QAAQ,CAACK,OAAV,CAAb;AACF,KAFD;AAGH,GATQ,EASN,CAACR,QAAD,CATM,CAAT;;AAYA,kBAA4BX,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOsB,MAAP;AAAA,MAAeL,SAAf;;AAGA,MAAMM,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAAT,GAAgB,EAA3B,IAAkC,EAAjD;AACA,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,IAApB,IAA6B,EAA7C;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BrB,UAAU,CAACgB,MAAD,CAArC,OAAgDhB,UAAU,CAACmB,OAAD,CAA1D,CADJ;AAKH,CA/CM;AAiDP,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,IAAI,EAAE;AACFG,IAAAA,QAAQ,EAAE5B,SAAS,CAAC6B,IADlB;AAEFC,IAAAA,UAAU,EAAE,MAFV;AAGFC,IAAAA,KAAK,EAAEhC,MAAM,CAACiC,KAHZ;AAIFC,IAAAA,OAAO,EAAEhC,OAAO,CAACiC,EAJf;AAKFC,IAAAA,eAAe,EAAE;AALf;AADuB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nimport { colors } from '../utils/colors'\nimport { fontSizes, spacing } from '../utils/sizes'\n\nconst minutesToMillis = (min) => min * 1000 * 60\nconst formatTime = (time) => time < 10 ? `0${time}` : time\n\nexport const Countdown = ({\n    minutes = 0.1,\n    isPaused,\n    onProgress,\n    onEnd\n}) => {\n    const interval = React.useRef(null)\n    const countDown = () => {\n        setMillis((time) => {\n            if(time === 0) {\n                clearInterval(interval.current)\n                return time\n            }\n            const timeLeft = time - 1000\n            onProgress(timeLeft / minutesToMillis(minutes))\n            return timeLeft\n        })\n    }\n\n    useEffect(() => {\n        setMillis(minutesToMillis(minutes))\n    }, [minutes])\n  \n\n    useEffect(() => {\n        if(isPaused) {\n            if(interval.current) clearInterval(interval.current)\n            return\n        }\n        interval.current = setInterval(countDown, 1000)\n        return () => {\n           clearInterval(interval.current) \n        }\n    }, [isPaused])\n\n\n    const [millis, setMillis] = useState(null)\n\n\n    const minute = Math.floor(millis / 1000 / 60 ) % 60;\n    const seconds = Math.floor(millis / 1000 ) % 60;\n\n    return (\n        <Text style={styles.text}>{formatTime(minute)}:{formatTime(seconds)}</Text>\n    )\n\n\n}\n\nconst styles = StyleSheet.create({\n    text: {\n        fontSize: fontSizes.xxxl,\n        fontWeight: 'bold',\n        color: colors.white,\n        padding: spacing.lg,\n        backgroundColor: 'rgba(94, 132, 226, 0.3)'\n    }\n})"]},"metadata":{},"sourceType":"module"}