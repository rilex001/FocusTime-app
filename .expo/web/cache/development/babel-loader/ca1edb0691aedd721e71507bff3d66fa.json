{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\stefa\\\\Desktop\\\\FocusTime-app-main\\\\src\\\\components\\\\Countdown.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { colors } from \"../utils/colors\";\nimport { fontSizes, spacing } from \"../utils/sizes\";\n\nvar minutesToMillis = function minutesToMillis(min) {\n  return min * 1000 * 60;\n};\n\nvar formatTime = function formatTime(time) {\n  return time < 10 ? \"0\" + time : time;\n};\n\nexport var Countdown = function Countdown(_ref) {\n  var _ref$minutes = _ref.minutes,\n      minutes = _ref$minutes === void 0 ? 20 : _ref$minutes,\n      isPaused = _ref.isPaused,\n      onProgress = _ref.onProgress;\n  var interval = React.useRef(null);\n\n  var countDown = function countDown() {\n    setMillis(function (time) {\n      if (time === 0) {\n        return time;\n      }\n\n      var timeLeft = time - 1000;\n      onProgress(timeLeft / minutesToMillis(minutes));\n      return timeLeft;\n    });\n  };\n\n  useEffect(function () {\n    console.log(millis);\n  }, [millis]);\n  useEffect(function () {\n    if (isPaused) {\n      if (interval.current) clearInterval(interval.current);\n    }\n\n    interval.current = setInterval(countDown, 1000);\n    return function () {\n      clearInterval(interval.current);\n    };\n  }, [isPaused]);\n\n  var _useState = useState(minutesToMillis(minutes)),\n      _useState2 = _slicedToArray(_useState, 2),\n      millis = _useState2[0],\n      setMillis = _useState2[1];\n\n  var minute = Math.floor(millis / 1000 / 60) % 60;\n  var seconds = Math.floor(millis / 1000) % 60;\n  return React.createElement(Text, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, formatTime(minute), \":\", formatTime(seconds));\n};\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: fontSizes.xxxl,\n    fontWeight: 'bold',\n    color: colors.white,\n    padding: spacing.lg,\n    backgroundColor: 'rgba(94, 132, 226, 0.3)'\n  }\n});","map":{"version":3,"sources":["C:/Users/stefa/Desktop/FocusTime-app-main/src/components/Countdown.js"],"names":["React","useState","useEffect","colors","fontSizes","spacing","minutesToMillis","min","formatTime","time","Countdown","minutes","isPaused","onProgress","interval","useRef","countDown","setMillis","timeLeft","console","log","millis","current","clearInterval","setInterval","minute","Math","floor","seconds","styles","text","StyleSheet","create","fontSize","xxxl","fontWeight","color","white","padding","lg","backgroundColor"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;AAGA,SAASC,MAAT;AACA,SAASC,SAAT,EAAoBC,OAApB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD;AAAA,SAASA,GAAG,GAAG,IAAN,GAAa,EAAtB;AAAA,CAAxB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAUA,IAAI,GAAG,EAAP,SAAgBA,IAAhB,GAAyBA,IAAnC;AAAA,CAAnB;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAInB;AAAA,0BAHFC,OAGE;AAAA,MAHFA,OAGE,6BAHQ,EAGR;AAAA,MAFFC,QAEE,QAFFA,QAEE;AAAA,MADFC,UACE,QADFA,UACE;AACF,MAAMC,QAAQ,GAAGd,KAAK,CAACe,MAAN,CAAa,IAAb,CAAjB;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBC,IAAAA,SAAS,CAAC,UAACR,IAAD,EAAU;AAChB,UAAGA,IAAI,KAAK,CAAZ,EAAe;AAEX,eAAOA,IAAP;AACH;;AACD,UAAMS,QAAQ,GAAGT,IAAI,GAAG,IAAxB;AACAI,MAAAA,UAAU,CAACK,QAAQ,GAAGZ,eAAe,CAACK,OAAD,CAA3B,CAAV;AACA,aAAOO,QAAP;AACH,KARQ,CAAT;AASH,GAVD;;AAYAhB,EAAAA,SAAS,CAAC,YAAM;AACZiB,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACH,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIAnB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGU,QAAH,EAAa;AACT,UAAGE,QAAQ,CAACQ,OAAZ,EAAqBC,aAAa,CAACT,QAAQ,CAACQ,OAAV,CAAb;AACxB;;AACDR,IAAAA,QAAQ,CAACQ,OAAT,GAAmBE,WAAW,CAACR,SAAD,EAAY,IAAZ,CAA9B;AACA,WAAO,YAAM;AACVO,MAAAA,aAAa,CAACT,QAAQ,CAACQ,OAAV,CAAb;AACF,KAFD;AAGH,GARQ,EAQN,CAACV,QAAD,CARM,CAAT;;AAWA,kBAA4BX,QAAQ,CAACK,eAAe,CAACK,OAAD,CAAhB,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeJ,SAAf;;AAGA,MAAMQ,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,IAAT,GAAgB,EAA3B,IAAkC,EAAjD;AACA,MAAMO,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,IAApB,IAA6B,EAA7C;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEQ,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BtB,UAAU,CAACiB,MAAD,CAArC,OAAgDjB,UAAU,CAACoB,OAAD,CAA1D,CADJ;AAKH,CA5CM;AA8CP,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,IAAI,EAAE;AACFG,IAAAA,QAAQ,EAAE7B,SAAS,CAAC8B,IADlB;AAEFC,IAAAA,UAAU,EAAE,MAFV;AAGFC,IAAAA,KAAK,EAAEjC,MAAM,CAACkC,KAHZ;AAIFC,IAAAA,OAAO,EAAEjC,OAAO,CAACkC,EAJf;AAKFC,IAAAA,eAAe,EAAE;AALf;AADuB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nimport { colors } from '../utils/colors'\nimport { fontSizes, spacing } from '../utils/sizes'\n\nconst minutesToMillis = (min) => min * 1000 * 60\nconst formatTime = (time) => time < 10 ? `0${time}` : time\n\nexport const Countdown = ({\n    minutes = 20,\n    isPaused,\n    onProgress\n}) => {\n    const interval = React.useRef(null)\n    const countDown = () => {\n        setMillis((time) => {\n            if(time === 0) {\n                // do more stuff here\n                return time\n            }\n            const timeLeft = time - 1000\n            onProgress(timeLeft / minutesToMillis(minutes))\n            return timeLeft\n        })\n    }\n\n    useEffect(() => {\n        console.log(millis)\n    }, [millis])\n\n    useEffect(() => {\n        if(isPaused) {\n            if(interval.current) clearInterval(interval.current)\n        }\n        interval.current = setInterval(countDown, 1000)\n        return () => {\n           clearInterval(interval.current) \n        }\n    }, [isPaused])\n\n\n    const [millis, setMillis] = useState(minutesToMillis(minutes))\n\n\n    const minute = Math.floor(millis / 1000 / 60 ) % 60;\n    const seconds = Math.floor(millis / 1000 ) % 60;\n\n    return (\n        <Text style={styles.text}>{formatTime(minute)}:{formatTime(seconds)}</Text>\n    )\n\n\n}\n\nconst styles = StyleSheet.create({\n    text: {\n        fontSize: fontSizes.xxxl,\n        fontWeight: 'bold',\n        color: colors.white,\n        padding: spacing.lg,\n        backgroundColor: 'rgba(94, 132, 226, 0.3)'\n    }\n})"]},"metadata":{},"sourceType":"module"}